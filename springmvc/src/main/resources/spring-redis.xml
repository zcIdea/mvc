<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.3.xsd"
    default-lazy-init="false">

    <!-- Spring容器仅允许最多定义一个PropertyPlaceholderConfigurer(或)，其余的会被Spring忽略掉,所有在总的配置文件那里写入配置文件即可 -->
    <!-- <context:property-placeholder location="classpath:redis.properties"/> -->
    
    <!-- 引入外置文件 -->
	<!-- <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:redis.properties" />
	</bean> -->
	
	<!-- 注解扫描包 (包括切面注解@Aspect)-->
    <context:component-scan base-package="com.springmvc.*" />
    
    <!-- redis配置 -->
    <!-- redis连接池 -->
    <bean id="poolConfig"  class="redis.clients.jedis.JedisPoolConfig">
        <!-- <property name="maxIdle" value="300"></property>
        <property name="minIdle" value="100"></property>
        <property name="maxTotal" value="500"></property>
        <property name="maxWaitMillis" value="3000"></property>
        <property name="testOnBorrow" value="true"></property> -->
        <property name="maxIdle" value="${redis.maxIdle}"></property>
        <property name="minIdle" value="${redis.minIdle}"></property>
        <property name="maxTotal" value="${redis.maxTotal}"></property>
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"></property>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
    </bean>
    
    <!-- redis连接工厂 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="127.0.0.1"></property>
        <property name="port" value="6379"></property>
        <!-- <property name="password" value="${redis.password}"></property> -->
        <property name="poolConfig" ref="poolConfig"></property>
<!--         <property name="hostName" value="${redis.host}"></property>
        <property name="port" value="${redis.port}"></property>
        <property name="password" value="${redis.password}"></property>
        <property name="poolConfig" ref="poolConfig"></property> -->
    </bean>

    <!-- redis操作模板，这里采用尽量面向对象的模板 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <!--以下针对各种数据进行序列化方式的选择-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
    </bean>
    
    
    <!--自定义redis工具类,在需要缓存的地方注入此类  -->  
    <bean id="redisrCacheManager" class="com.phil.common.redis.RedisCacheManager">  
        <property name="redisTemplate" ref="redisTemplate" />  
    </bean>
    
</beans>